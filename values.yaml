namespace: ag-microservices-demo

serviceAccounts:
  create: true
  annotationsOnlyForCartservice: false
  annotations: {} # Add any annotations here

# Security Settings
securityContext:
  enable: true
seccompProfile:
  enable: false
  type: RuntimeDefault

# Networking and Istio-related settings
networkPolicies:
  create: true
sidecars:
  create: true
authorizationPolicies:
  create: true

# OpenTelemetry Collector Configuration
opentelemetryCollector:
  create: false
  name: opentelemetry-collector

# Cart Database Configuration (Redis)
cartDatabase:
  type: redis
  connectionString: "cart-redis:6379"
  inClusterRedis:
    create: true
    name: cart-redis
    publicRepository: false
  externalRedisTlsOrigination:
    enable: false
    name: external-redis-tls
    certificate: "" # PEM encoded certificate string
    endpointAddress: ""
    endpointPort: 6379

# Microservices configuration

adService:
  create: true
  name: adservice
  image:
    repository: "svc_1_adservice"
    tag: "latest"
  resources:
    requests:
      cpu: "200m"
      memory: "180Mi"
    limits:
      cpu: "300m"
      memory: "300Mi"

checkoutService:
  create: true
  name: checkoutservice
  image:
    repository: "svc_2_checkoutservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

currencyService:
  create: true
  name: currencyservice
  image:
    repository: "svc_3_currencyservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

emailService:
  create: true
  name: emailservice
  image:
    repository: "svc_4_emailservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

frontend:
  create: true
  name: frontend
  image:
    repository: "svc_5_frontend"
    tag: "latest"
  externalService: true
  cymbalBranding: false
  platform: local
  singleSharedSession: false
  virtualService:
    create: false
    hosts:
      - "*"
    gateway:
      name: asm-ingressgateway
      namespace: asm-ingress
      labelKey: asm
      labelValue: ingressgateway
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

loadGenerator:
  create: true
  name: loadgenerator
  image:
    repository: "svc_6_loadgenerator"
    tag: "latest"
  checkFrontendInitContainer: true
  resources:
    requests:
      cpu: "300m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

paymentService:
  create: true
  name: paymentservice
  image:
    repository: "svc_7_paymentservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

productCatalogService:
  create: true
  name: productcatalogservice
  image:
    repository: "svc_8_productcatalogservice"
    tag: "latest"
  extraLatency: ""
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

recommendationService:
  create: true
  name: recommendationservice
  image:
    repository: "svc_9_recommendationservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "220Mi"
    limits:
      cpu: "200m"
      memory: "450Mi"

shippingService:
  create: true
  name: shippingservice
  image:
    repository: "svc_10_shippingservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

shoppingAssistantService:
  create: true
  name: shoppingassistantservice
  image:
    repository: "svc_11_shoppingassistantservice"
    tag: "latest"

cartService:
  create: true
  name: cartservice
  image:
    repository: "svc_12_zcartservice"
    tag: "latest"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

redis:
  image:
    repository: "redis"
    tag: "alpine"
  resources:
    requests:
      cpu: "100m"
      memory: "64Mi"
    limits:
      cpu: "200m"
      memory: "128Mi"

prometheus:
  enabled: true
  replicas: 2
  serviceAccountName: "prometheus"